(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    224121,       4424]
NotebookOptionsPosition[    217164,       4300]
NotebookOutlinePosition[    217565,       4316]
CellTagsIndexPosition[    217522,       4313]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["MNIST labels", "Section",
 CellChangeTimes->{{3.910890909424322*^9, 3.9108909166342316`*^9}, {
  3.91132085506792*^9, 
  3.9113208565375443`*^9}},ExpressionUUID->"2229586a-c2fd-4483-86d2-\
d57bbc1386c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"labelsf", "=", 
    RowBox[{"Import", "[", 
     RowBox[{
     "\"\<C:\\\\Users\\\\Colin\\\\Desktop\\\\emnist-digits-train-labels-idx1-\
ubyte\>\"", ",", "\"\<UnsignedInteger8\>\""}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Importing", " ", "the", " ", "named", " ", "file", " ", 
    "\"\<emnist digits train labels idx1 ubyte\>\"", " ", "in", " ", "the", 
    " ", "unsigned", " ", "integer", " ", "8", " ", "format"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.9108909263558316`*^9, 3.9108910104141517`*^9}, {
  3.911059363425629*^9, 3.9110594108611565`*^9}, {3.9143698144918146`*^9, 
  3.914369861198435*^9}},ExpressionUUID->"08be7b90-b091-4f52-8f63-\
56514fb63c16"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"labelsf", "\[LeftDoubleBracket]", 
   RowBox[{"1", ";;", "100"}], "\[RightDoubleBracket]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Listing", " ", "the", " ", "first", " ", "100", " ", "numbers", " ", "in",
     " ", "train", " ", "labels", " ", "idx1", " ", "ubyte", " ", "file"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.9108910150961237`*^9, 3.9108910242987685`*^9}, {
   3.914369738714053*^9, 3.91436979073776*^9}, 
   3.914430625002939*^9},ExpressionUUID->"7b6cf7e2-c330-43e7-8dca-\
5b6fa4bee2ff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "8", ",", "1", ",", "0", ",", "3", ",", "169", ",", 
   "128", ",", "8", ",", "9", ",", "6", ",", "3", ",", "6", ",", "6", ",", 
   "7", ",", "1", ",", "9", ",", "0", ",", "9", ",", "6", ",", "8", ",", "4", 
   ",", "8", ",", "3", ",", "3", ",", "7", ",", "0", ",", "9", ",", "5", ",", 
   "1", ",", "1", ",", "8", ",", "1", ",", "9", ",", "9", ",", "1", ",", "4", 
   ",", "7", ",", "0", ",", "1", ",", "4", ",", "4", ",", "4", ",", "5", ",", 
   "9", ",", "2", ",", "8", ",", "2", ",", "6", ",", "4", ",", "1", ",", "2", 
   ",", "8", ",", "8", ",", "8", ",", "8", ",", "0", ",", "2", ",", "9", ",", 
   "1", ",", "9", ",", "0", ",", "9", ",", "5", ",", "1", ",", "0", ",", "6", 
   ",", "9", ",", "8", ",", "2", ",", "4", ",", "8", ",", "9", ",", "4", ",", 
   "8", ",", "5", ",", "8", ",", "5", ",", "8", ",", "5", ",", "4", ",", "3", 
   ",", "5", ",", "2", ",", "0", ",", "2", ",", "2", ",", "8", ",", "7", ",", 
   "4", ",", "7", ",", "0", ",", "8", ",", "2", ",", "5", ",", "3", ",", "4", 
   ",", "8", ",", "7", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.910891024761981*^9, 3.911059418425012*^9, 
  3.911320746486678*^9, 3.9113441067497773`*^9, 3.911563947886668*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"3ca05784-4456-449d-9e06-b5103114e37b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"magicnumberlabels", "=", 
  RowBox[{"ImportByteArray", "[", 
   RowBox[{
    RowBox[{"ByteArray", "[", 
     RowBox[{
      RowBox[{"labelsf", "\[LeftDoubleBracket]", 
       RowBox[{"1", ";;", "4"}], "\[RightDoubleBracket]"}], "//", "Reverse"}],
      "]"}], ",", "\"\<UnsignedInteger32\>\""}], "]"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Making", " ", "a", " ", "byte", " ", "array", " ", "of", " ", "labelsf", 
     " ", "and", " ", "importing", " ", "data", " ", "from", " ", "the", " ", 
     "imported", " ", "byte", " ", "array", " ", "in", " ", "the", " ", 
     "format", " ", "of", " ", "unsigned", " ", "integer", " ", "32"}], ",", 
    " ", 
    RowBox[{
    "then", " ", "verifying", "  ", "the", " ", "magic", " ", "number", " ", 
     "associated", " ", "with", " ", "it"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.9108910426496315`*^9, 3.9108911317818456`*^9}, {
  3.914430665544421*^9, 3.9144306711837535`*^9}, {3.9144307014130983`*^9, 
  3.9144307197757297`*^9}, {3.9144321748020887`*^9, 3.9144322084033732`*^9}, {
  3.9144422726794844`*^9, 
  3.9144423140069914`*^9}},ExpressionUUID->"ee4442c2-7eda-45a8-a5a8-\
d2eda7be110c"],

Cell[BoxData[
 RowBox[{"{", "2049", "}"}]], "Output",
 CellChangeTimes->{3.910891134628726*^9, 3.9110594233367615`*^9, 
  3.9113207465627995`*^9, 3.9113216952118044`*^9, 3.911344108504758*^9, 
  3.911350849018103*^9, 3.911400783094393*^9, 3.9114806355370483`*^9, 
  3.911563947920613*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"cc0a79d1-89bc-4edf-8b20-6e88f58cb22d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberoflabels", "=", 
  RowBox[{"ImportByteArray", "[", 
   RowBox[{
    RowBox[{"ByteArray", "[", 
     RowBox[{
      RowBox[{"labelsf", "\[LeftDoubleBracket]", 
       RowBox[{"5", ";;", "8"}], "\[RightDoubleBracket]"}], "//", "Reverse"}],
      "]"}], ",", "\"\<UnsignedInteger32\>\""}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Showing", " ", "the", " ", "amount", " ", "of", " ", "labels", " ", "in", 
    " ", "the", " ", "labelsf", " ", "variable"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.910891185799917*^9, 3.910891201864339*^9}, {
  3.9144525427695165`*^9, 
  3.914452554871419*^9}},ExpressionUUID->"ffc116bd-6068-4227-831d-\
94ab984599c3"],

Cell[BoxData[
 RowBox[{"{", "240000", "}"}]], "Output",
 CellChangeTimes->{
  3.9108912059715357`*^9, 3.9110594250243435`*^9, 3.9113207466150513`*^9, 
   3.911321698199899*^9, 3.9113441118641043`*^9, 3.9113508501981573`*^9, {
   3.9113512982246256`*^9, 3.9113513030827713`*^9}, 3.911480636156347*^9, 
   3.9115639479535136`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"14697fe1-2f5c-48a0-8016-e6b0b8f260f9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"labelslearn", "=", 
    RowBox[{"labelsf", "\[LeftDoubleBracket]", 
     RowBox[{"9", ";;"}], "\[RightDoubleBracket]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "cutting", " ", "off", " ", "the", " ", "extraneous", " ", "beginning", 
     " ", "numbers"}], ",", " ", 
    RowBox[{
    "as", " ", "they", " ", "were", " ", "for", " ", "formatting", " ", "the",
      " ", "file"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.9108912195776834`*^9, 3.910891250302144*^9}, {
  3.9143698972676253`*^9, 
  3.9143699193550034`*^9}},ExpressionUUID->"137ced53-1e91-48f8-994c-\
b203cabc7fad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "labelslearn", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Proving", " ", "that", " ", "we", " ", "cut", " ", "off", " ", "the", " ",
     "first", " ", "8", " ", "numbers", " ", "of", " ", "labelsf"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.91089125301492*^9, 3.910891259825637*^9}, {
  3.9108917925992413`*^9, 3.9108917934089313`*^9}, {3.91105943506205*^9, 
  3.911059435501851*^9}, {3.9113208609753923`*^9, 3.9113208614615173`*^9}, {
  3.9143699239746275`*^9, 3.914369930354476*^9}, {3.9143700371650715`*^9, 
  3.914370077366588*^9}},ExpressionUUID->"a9d8c9ea-65a2-4877-9107-\
3c003a413cd8"],

Cell[BoxData["8"], "Output",
 CellChangeTimes->{
  3.9108912601888914`*^9, 3.9108917940959263`*^9, {3.911059430777314*^9, 
   3.9110594361654344`*^9}, 3.9113207466676226`*^9, 3.9113208622675*^9, 
   3.9113216210328007`*^9, 3.911321881178734*^9, {3.9113219932292013`*^9, 
   3.9113219976056795`*^9}, 3.9114806385848403`*^9, 3.9115639479864006`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"4eca02cc-e28c-4c5a-91f0-ef5581145524"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["MNIST Images", "Section",
 CellChangeTimes->{{3.9113208664577694`*^9, 3.9113208731631746`*^9}, {
  3.9113210036353855`*^9, 3.9113210037577353`*^9}, {3.911401151264261*^9, 
  3.911401153910392*^9}},ExpressionUUID->"36c8ea07-42d2-45cf-890b-\
0362355febb1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"imagesf", "=", " ", 
    RowBox[{"Import", "[", 
     RowBox[{
     "\"\<C:\\\\Users\\\\Colin\\\\Desktop\\\\emnist-digits-train-images-idx3-\
ubyte\>\"", ",", "\"\<UnsignedInteger8\>\""}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "Importing", " ", "the", " ", "named", " ", "file", " ", 
    "\"\<emnist digits train labels idx3 ubyte\>\"", " ", "in", " ", "the", 
    " ", "unsigned", " ", "integer", " ", "8", " ", "format"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.9114012128644867`*^9, 3.9114012344693356`*^9}, {
  3.911401275928546*^9, 3.911401275932581*^9}, {3.9144525736580396`*^9, 
  3.9144525779313817`*^9}},ExpressionUUID->"423873e0-ef0a-4a08-9679-\
230e2dce33db"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"magicnumberimages", "=", 
  RowBox[{"ImportByteArray", "[", 
   RowBox[{
    RowBox[{"ByteArray", "[", 
     RowBox[{
      RowBox[{"imagesf", "\[LeftDoubleBracket]", 
       RowBox[{"1", ";;", "4"}], "\[RightDoubleBracket]"}], "//", "Reverse"}],
      "]"}], ",", "\"\<UnsignedInteger32\>\""}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Showing", " ", 
    RowBox[{"it", "'"}], "s", " ", "the", " ", "correct", " ", "file", " ", 
    "with", " ", "the", " ", "corresponding", " ", "magic", " ", "number"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.9114802260447626`*^9, 3.911480237596415*^9}, {
  3.9144525806199355`*^9, 3.9144525910755877`*^9}, {3.9145144838229027`*^9, 
  3.9145144859713383`*^9}},ExpressionUUID->"80551ed2-6d66-4782-a101-\
947246ddf392"],

Cell[BoxData[
 RowBox[{"{", "2051", "}"}]], "Output",
 CellChangeTimes->{{3.9114802281704626`*^9, 3.911480238171303*^9}, 
   3.911480652489768*^9, 3.9115639532865396`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"9c7ac375-9aa2-4b01-ad38-03fcdcc7541a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberofimages", "=", 
  RowBox[{
   RowBox[{"ImportByteArray", "[", 
    RowBox[{
     RowBox[{"ByteArray", "[", 
      RowBox[{
       RowBox[{"imagesf", "\[LeftDoubleBracket]", 
        RowBox[{"5", ";;", "8"}], "\[RightDoubleBracket]"}], "//", 
       "Reverse"}], "]"}], ",", "\"\<UnsignedInteger32\>\""}], "]"}], 
   "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
  RowBox[{"(*", 
   RowBox[{"Showing", " ", 
    RowBox[{"it", "'"}], "s", " ", "the", " ", "correct", " ", "file", " ", 
    "with", " ", "the", " ", "corresponding", " ", "magic", " ", "number"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.911480251997359*^9, 3.911480274526235*^9}, 
   3.9145152417366037`*^9},ExpressionUUID->"51eec9c4-a755-4d76-a3c3-\
6c36b8588574"],

Cell[BoxData["240000"], "Output",
 CellChangeTimes->{{3.911480263224943*^9, 3.9114802750448885`*^9}, 
   3.9114803638684473`*^9, 3.911480653066868*^9, 3.9115639533374043`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"4bc2815f-4ce6-4a4e-9384-c38dff2b7206"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"outarray", " ", "=", " ", 
    RowBox[{"Array", "[", 
     RowBox[{
      RowBox[{"0", "&"}], ",", 
      RowBox[{"{", 
       RowBox[{"240000", ",", "10"}], "}"}]}], "]"}]}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"An", " ", "array", " ", "of", " ", "240"}], ",", 
    RowBox[{
    "000", " ", "x", " ", "10", " ", "filled", " ", "with", " ", "all", " ", 
     "0", "s"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{
  3.9113210123483973`*^9, 3.911394164576123*^9, {3.911402534966464*^9, 
   3.9114025422482915`*^9}, {3.9143703021294584`*^9, 
   3.914370330530696*^9}},ExpressionUUID->"f2f780c1-8c37-41dc-a5a9-\
d6d05c54df67"],

Cell[BoxData[
 RowBox[{
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"j", "=", "1"}], ",", 
    RowBox[{"j", "<=", "240000"}], ",", 
    RowBox[{"j", "++"}], ",", 
    RowBox[{
     RowBox[{"outarray", "\[LeftDoubleBracket]", 
      RowBox[{"j", ",", 
       RowBox[{
        RowBox[{
        "labelslearn", "\[LeftDoubleBracket]", "j", "\[RightDoubleBracket]"}],
         "+", "1"}]}], "\[RightDoubleBracket]"}], "=", "1"}]}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"'", 
    RowBox[{"Randomly", "'"}], " ", "filling", " ", "in", " ", "one", " ", 
    "part", " ", "of", " ", "the", " ", "array", " ", "with", " ", "a", " ", 
    "1"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.911321021054045*^9, 3.91132108700013*^9}, {
  3.9114025396733217`*^9, 3.9114025444373455`*^9}, {3.914373854639389*^9, 
  3.914373870624142*^9}, {3.914431880221192*^9, 
  3.9144318832471523`*^9}},ExpressionUUID->"7d687d12-93fe-48e0-930c-\
4b21ede2cf9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"outarray", "\[LeftDoubleBracket]", 
   RowBox[{"1", ";;", "50"}], "\[RightDoubleBracket]"}], " ", 
  RowBox[{"(*", 
   RowBox[{"Proof", " ", "of", " ", "previous", " ", "line"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.91140365206911*^9, 3.911403660385454*^9}, {
  3.911403711756607*^9, 3.9114037285534263`*^9}, {3.914373880120118*^9, 
  3.9143738854725604`*^9}},ExpressionUUID->"a8ad2123-abb6-4546-b9a9-\
260d28ca4cee"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.911403660799765*^9, {3.911403712430438*^9, 3.911403728817891*^9}, 
   3.911480663837758*^9, 3.911563953969572*^9, 3.9115709863506007`*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"2fdcdb45-ef83-4740-970e-a0d7290a904f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"numberofrows", "=", 
   RowBox[{
    RowBox[{"ImportByteArray", "[", 
     RowBox[{
      RowBox[{"ByteArray", "[", 
       RowBox[{
        RowBox[{"imagesf", "\[LeftDoubleBracket]", 
         RowBox[{"9", ";;", "12"}], "\[RightDoubleBracket]"}], "//", 
        "Reverse"}], "]"}], ",", "\"\<UnsignedInteger32\>\""}], "]"}], 
    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Assigning", " ", "number", " ", "of", " ", "rows", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
       "or", " ", "maybe", " ", "because", " ", "data", " ", "pixels", " ", 
        "starts", " ", "form", " ", "17"}], ",", " ", 
       RowBox[{
       "so", " ", "the", " ", "parts", " ", "9", " ", "through", " ", "12", 
        " ", "are", " ", 
        RowBox[{"informational", " ", "--"}], " ", 
        RowBox[{"I", "'"}], "m", " ", "not", " ", "quite", " ", "sure"}]}], 
      ")"}]}], ",", " ", 
    RowBox[{
     RowBox[{
     "specifically", " ", "using", " ", "different", " ", "parts", " ", "to", 
      " ", "not", " ", "overlap"}], ";", " ", 
     RowBox[{
     "in", " ", "an", " ", "unsigned", " ", "32", " ", "bit", " ", "integer", 
      " ", "format"}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numberofcols", "=", 
   RowBox[{
    RowBox[{"ImportByteArray", "[", 
     RowBox[{
      RowBox[{"ByteArray", "[", 
       RowBox[{
        RowBox[{"imagesf", "\[LeftDoubleBracket]", 
         RowBox[{"13", ";;", "16"}], "\[RightDoubleBracket]"}], "//", 
        "Reverse"}], "]"}], ",", "\"\<UnsignedInteger32\>\""}], "]"}], 
    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Assigning", " ", "number", " ", "of", " ", "columns"}], ",", " ", 
    RowBox[{
     RowBox[{
     "specifically", " ", "using", " ", "different", " ", "parts", " ", "to", 
      " ", "not", " ", "overlap"}], ";", " ", 
     RowBox[{
     "in", " ", "an", " ", "unsigned", " ", "32", " ", "bit", " ", "integer", 
      " ", "format"}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"datapixels", "=", 
   RowBox[{"imagesf", "\[LeftDoubleBracket]", 
    RowBox[{"17", ";;"}], "\[RightDoubleBracket]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9113212738390284`*^9, 3.911321277730161*^9}, {
   3.911321442047058*^9, 3.9113214584507513`*^9}, 3.911321515473053*^9, {
   3.9113941473160195`*^9, 3.9113941518513775`*^9}, {3.9114008274509172`*^9, 
   3.911400837945181*^9}, {3.911401286053075*^9, 3.9114012979784546`*^9}, {
   3.9114803830653753`*^9, 3.9114803947067766`*^9}, {3.914514259525047*^9, 
   3.9145143821845407`*^9}, {3.91451541749306*^9, 
   3.914515441809576*^9}},ExpressionUUID->"3eea2b0b-bb6d-49f9-bba2-\
a4c73aadc28d"],

Cell[BoxData["28"], "Output",
 CellChangeTimes->{
  3.9113941522142706`*^9, {3.9114008290956984`*^9, 3.911400838588215*^9}, {
   3.911401288231124*^9, 3.9114012986290655`*^9}, {3.911480385080804*^9, 
   3.911480395724081*^9}, 3.9114806655465283`*^9, 3.9114815310120587`*^9, 
   3.911563954012621*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"c2eaf14b-d0dd-49ad-bc3e-3caaae6e9163"],

Cell[BoxData["28"], "Output",
 CellChangeTimes->{
  3.9113941522142706`*^9, {3.9114008290956984`*^9, 3.911400838588215*^9}, {
   3.911401288231124*^9, 3.9114012986290655`*^9}, {3.911480385080804*^9, 
   3.911480395724081*^9}, 3.9114806655465283`*^9, 3.9114815310120587`*^9, 
   3.911563954015625*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"e548d72a-dad7-430b-9b72-c244a7b6e875"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Image Learning ", "Section",
 CellChangeTimes->{{3.9114804274158745`*^9, 
  3.9114804498354692`*^9}},ExpressionUUID->"f47e82c5-a8c6-4e63-8834-\
5eee0bb5b96c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"learnimages", " ", "=", " ", 
    RowBox[{"ArrayReshape", "[", 
     RowBox[{"datapixels", ",", 
      RowBox[{"{", 
       RowBox[{"numberofimages", ",", " ", 
        RowBox[{"numberofrows", "*", "numberofcols"}]}], "}"}]}], "]"}]}], 
   ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Multiplying", " ", "rows", " ", "by", " ", "columns"}], ",", " ", 
    RowBox[{
    "which", " ", "gives", " ", "an", " ", "array", " ", "of", " ", "784.", 
     " ", "Then", " ", "augmenting", " ", "it", " ", "with", " ", "the", " ", 
     "numberofimages", " ", "variable", " ", "and", " ", "giving", " ", "a", 
     " ", "new", " ", "array", " ", "which", " ", "we", " ", "will", " ", 
     "reshape", " ", "our", " ", "data", " ", "in", " ", "datapixels", " ", 
     RowBox[{"to", " ", "--"}], " ", "called", " ", "learnimages"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.911480494021327*^9, 3.9114805592089224`*^9}, {
  3.9114806923409233`*^9, 3.911480718936777*^9}, {3.9145143937551885`*^9, 
  3.9145144625675325`*^9}, {3.9145144982514377`*^9, 
  3.9145145356602116`*^9}},ExpressionUUID->"39d58ae2-1660-4599-83ba-\
a88deac9121f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Dimensions", "[", "learnimages", "]"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "This", " ", "command", " ", "tells", " ", "us", " ", "what", " ", "the", 
     " ", "dimensions", " ", "of", " ", "the", " ", "learnimages", " ", 
     "array", " ", "is"}], ",", " ", 
    RowBox[{
    "proving", " ", "we", " ", "did", " ", "the", " ", "correct", " ", 
     "thing", " ", "in", " ", "the", " ", "previous", " ", "line"}]}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.9114807206402016`*^9, 3.911480724355942*^9}, {
  3.9144321326809473`*^9, 3.914432150311812*^9}, {3.914514540524523*^9, 
  3.9145145507641416`*^9}},ExpressionUUID->"902f0eb9-1cf9-41de-8964-\
8123b9652c42"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"240000", ",", "784"}], "}"}]], "Output",
 CellChangeTimes->{{3.9114807091898036`*^9, 3.911480724986491*^9}, 
   3.911563956704897*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"276156e2-baf1-4b6e-8b1c-da719706339a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ArrayReshape", "[", 
    RowBox[{
     RowBox[{
     "learnimages", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"numberofrows", ",", "numberofcols"}], "}"}]}], "]"}], "//", 
   "Transpose"}], "//", "ArrayPlot", " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "This", " ", "line", " ", "makes", " ", "the", " ", "below", " ", 
     "plot"}], ",", " ", 
    RowBox[{
    "which", " ", "is", " ", "a", " ", "visualization", " ", "the", " ", 
     "image", " ", "which", " ", "will", " ", "go", " ", "into", " ", "the", 
     " ", "Neural", " ", 
     RowBox[{"Network", ".", " ", "Arrayplot"}], " ", "is", " ", "nessecary", 
     " ", "to", " ", "even", " ", "make", " ", "the", " ", "image", " ", 
     "appear"}], ",", " ", 
    RowBox[{
    "while", " ", "transpose", " ", "is", " ", "needed", " ", "for", " ", 
     "clarity", " ", "of", " ", "the", " ", "digit"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.911480730317548*^9, 3.9114808048423295`*^9}, {
   3.914513057880228*^9, 3.914513093024739*^9}, {3.9145141185180454`*^9, 
   3.914514127712104*^9}, 3.9145144914194975`*^9, {3.9145145648493185`*^9, 
   3.9145145926513033`*^9}},ExpressionUUID->"3dd615db-fe4a-47bf-a9ce-\
674f1984bcac"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJyNkr9Kw1AUh/NrEkkanWrs4mAa1FWQPoC+gKVSpyCh4CQotKNDS+maZ7BI
3auzPkIx3cSSdk6dW4P5c72RDvbeFPzgTh+/c+459xr122o9JwjC7vKQfxGt
E77TLDcdb5EReSrmRBHIm72AdbMaCtXzQwUo9ueM+zjA3kP03dcA5STkclC7
fuJaEtTRqotfTFruzosnp4DDBIlv68CWmzhAh3UkHJgqSo1rka2ZEgxbGmQJ
RsaMhCRvOgTo48wFLQzqYFxxDSmuCgn0wjNefR2h9FpRId4nnPPyciMeV4B9
n5vCgdwmZHqmwJqwrg3phj6DV8ZGh89BH8Qk6ElpfhV/R8C27YZzk3dhmQ4A
9bh1yTvyqOHXFrh+dGmurYD+Pf6eKVE3lfJ7hiLk06J1N6eZjgSji9ozv7Ml
cbzO/OUHXF1rqg==
   "], {{0, 0}, {28, 28}}, {0, 255}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{3.9114808059219933`*^9, 3.911563956940545*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"2ea0ee85-1de6-4a7e-a266-5f3afd9d252e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["NN", "Section",
 CellChangeTimes->{{3.911401136096994*^9, 
  3.9114011571038685`*^9}},ExpressionUUID->"0095bd99-e99c-4f9a-a244-\
13a5d346618e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainingdatainputs", "=", "learnimages"}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"defining", " ", "stuff", " ", "for", " ", "the", " ", "NN"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.9114808918013196`*^9, 3.911480899968356*^9}, {
  3.914515212295514*^9, 
  3.914515217264479*^9}},ExpressionUUID->"461a0544-e9aa-47f3-b44d-\
e7389bdb6573"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"trainingdataoutputs", "=", "outarray"}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"defining", " ", "stuff", " ", "for", " ", "the", " ", "NN"}], 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.911401608541627*^9, 3.911401621697919*^9}, 
   3.914515222339507*^9},ExpressionUUID->"bb597dcd-7779-4083-ad52-\
d96e628d2d23"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"datainputs", " ", "=", " ", "784"}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Because", " ", "we", " ", "have", " ", "a", " ", "28", " ", "x", " ", 
    "28", " ", "size", " ", "image"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dataoutputs", " ", "=", " ", "10"}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "This", " ", "is", " ", "for", " ", "all", " ", "digits", " ", "0", " ", 
    "to", " ", "9"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"hiddendata", " ", "=", " ", "10"}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Changing", " ", "this", " ", "will", " ", "allow", " ", "for", " ", "a", 
     " ", "grater", " ", "degree", " ", "of", " ", "accuracy"}], ",", " ", 
    RowBox[{"10", " ", "is", " ", "what", " ", "was", " ", "used", " ", 
     RowBox[{"for", " ", "~", "25"}], "%", " ", "error"}], ",", " ", 
    RowBox[{
    "and", " ", "can", " ", "be", " ", "changed", " ", "or", " ", "added", 
     " ", "onto", " ", "for", " ", "better", " ", "results"}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.9114016244515905`*^9, 3.911401646663284*^9}, {
   3.9114017073336196`*^9, 3.911401708481914*^9}, {3.9114023785528145`*^9, 
   3.911402381008441*^9}, {3.9114043105602612`*^9, 3.911404313834302*^9}, {
   3.911405447176255*^9, 3.9114054488485055`*^9}, {3.91148190540147*^9, 
   3.9114819101070127`*^9}, {3.911482255679598*^9, 3.9114822562409964`*^9}, {
   3.911482311010274*^9, 3.9114823111798987`*^9}, 3.9114825643371725`*^9, 
   3.9115704587885556`*^9, {3.9115749801592607`*^9, 3.9115749844849405`*^9}, {
   3.914514144681266*^9, 3.914514170964006*^9}, {3.9145142341016483`*^9, 
   3.914514246687436*^9}, {3.914514680395667*^9, 
   3.9145147110783663`*^9}},ExpressionUUID->"e3db0afa-cc1f-4a78-a177-\
966e16a5679f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", " ", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"Defining", " ", "the", " ", "actual", " ", "neural", " ", 
       RowBox[{"network", ".", " ", "Going"}], " ", "from", " ", "the", " ", 
       "input", " ", "layer", " ", 
       RowBox[{"(", "datainputs", ")"}], " ", "to", " ", "the", " ", "hidden",
        " ", "data", " ", "layer", " ", 
       RowBox[{"(", "hiddendata", ")"}]}], ",", " ", 
      RowBox[{
      "then", " ", "from", " ", "hiddendata", " ", "to", " ", "the", " ", 
       "output", " ", "layer", " ", 
       RowBox[{
        RowBox[{"(", "dataoutputs", ")"}], ".", " ", "It"}], " ", "should", 
       " ", "be", " ", "possible", " ", "to", " ", "add", " ", "more", " ", 
       "layers", " ", "inbetween", " ", "by", " ", "adding", " ", "a", " ", 
       "new", " ", "input", " ", "and", " ", "output", " ", "block"}], ",", 
      " ", 
      RowBox[{"along", " ", "with", " ", "the", " ", 
       RowBox[{"elementwiselayer", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"LinearLayer", "[", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "->", "datainputs"}], ",", 
        RowBox[{"\"\<Output\>\"", "->", "hiddendata"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "LogisticSigmoid", "]"}], ",", 
      RowBox[{"(*", 
       RowBox[{
       "Forces", " ", "the", " ", "data", " ", "to", " ", "be", " ", "in", 
        " ", "the", " ", "logistic", " ", "sigmoid", " ", "shape"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", 
       RowBox[{
        RowBox[{"\"\<Input\>\"", "->", "hiddendata"}], ",", 
        RowBox[{"\"\<Output\>\"", "->", "dataoutputs"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "LogisticSigmoid", "]"}]}], 
     "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.9114017274234457`*^9, 3.911401765793104*^9}, {
  3.9114037607343173`*^9, 3.911403771000182*^9}, {3.91140471381474*^9, 
  3.9114047491072216`*^9}, {3.9145146367776423`*^9, 3.914514673786269*^9}, {
  3.914514718524806*^9, 3.914514823085227*^9}, {3.9145155755638523`*^9, 
  3.9145156015544496`*^9}},ExpressionUUID->"85174028-ffb1-4de7-919a-\
1f443444b514"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetChain",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.014925373134328358`], {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                CurveClosed -> {0}]}, {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[0.631, 0.8160000000000001, 0.498], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.40800000000000003`, 0.627, 0.196], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {15., 
                79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 103.}, {23.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.38, 0.753, 0.89], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.24300000000000002`, 0.608, 0.71], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {29., 
                79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 103.}, {37.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.584, 0.51, 0.8390000000000001], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.4, 0.396, 0.659], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {43., 
                79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 103.}, {51.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.549, 0.549, 0.549], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25., 
                95.}, {25., 88.}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39., 
                95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
             ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                   StyleBox["\"(\[VeryThinSpace]size: 784\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                   StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.014925373134328358`], {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                CurveClosed -> {0}]}, {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[0.631, 0.8160000000000001, 0.498], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.40800000000000003`, 0.627, 0.196], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {15., 
                79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 103.}, {23.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.38, 0.753, 0.89], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.24300000000000002`, 0.608, 0.71], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {29., 
                79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 103.}, {37.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.584, 0.51, 0.8390000000000001], 
                 Opacity[1.]}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.4, 0.396, 0.659], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {43., 
                79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 103.}, {51.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.549, 0.549, 0.549], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25., 
                95.}, {25., 88.}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39., 
                95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
             ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
            GridBox[{{
               TagBox[
                
                DynamicModuleBox[{
                 NeuralNetworks`Private`NetChain`assoc3 = <|
                   "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 784}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 784, "$InputDimensions" -> {784}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{784}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 10}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{784}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                  NeuralNetworks`Private`NetChain`opart, 
                  NeuralNetworks`Private`NetChain`part, 
                  NeuralNetworks`Private`NetChain`selected = Null}, 
                 DynamicBox[
                  GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 784\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridFrameMargins -> {{0, 0}, {0, 0}}], 
                  TrackedSymbols :> {
                   NeuralNetworks`Private`NetChain`selected}], 
                 Initialization :> {NetChain}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetChain[<|
   "Type" -> "Chain", 
    "Nodes" -> <|
     "1" -> <|"Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
r2mlcyYm4tuDu3FJqAZqVBaJyo4ilc6Lxoxhd0Ht3Cs4PfoQpeeaCn5P59DS
rH/URUjCtcghuPDwfHB3cYX1f+2g4spBbtmigDqvP9CujBX0TU6RHz1aDq9i
e7FfdDV1fHwDn6OG867qNgh0Wsnn94ggLAgB7TQ/Ss2Ph/Kz12BVnb9Y5AW8
8UoA6SXOhjL7Frh16hbsjB7FQ713CSPmXRRcDW6KzT8G4QGaxu6nk6D68zP4
5XVMkp5izK1vPHDNgPmin9w6+O6YRdf9HDg2eCdoHJTjFaqzunTuMqXqnJA6
nZzOO5rDaPHbYpp18hE5+58Xr/5nh+36w9jt0lOpppoq5Kz34+Ham/H1dF2o
dOnLbvevCCZ1o9F8jgdV9e/PCbr1kPK9ues/DRKDj+3Cul1W8Ll/K2md/yyp
KerJZ400qcBADh9ntIi6D5x4yeZsqlQ0l1ju3yZ6B+2F1Ye/weMb8dTnwHsy
9LHAJk1lmJL/G/JTU8USN0VW0btHdj2/k1+6Bz/arkINSwdzcmN3OmOchTpu
OXxzzF0atrE7aX1qpOUbE6BQzp/d8RgVj7pPL+ykdOixIQcszIaes+rYX6LG
GiF7QfZ5LfVb/AXG/5Pn+u2X6PpgWYzx9+ChHjfEb8OLST0nDXr7p8HrgPHO
jwLfQ1OiHgf8TkfFthzKk4ziw6P18NfFvginovHqkuFsJvUThLpZLI61Q6/k
5agYWQ7rm8rgtvVxeLNlFYc66oL4ri8Zj1bk3GZ1qXn7Jzq06x6d7nmINhd/
I5WtmTTv3Hj6ensItdt+gAfNzUJBL0WUGZQAko8BtPHGHQjz+ABFx0Lp40pz
Tvg0CBTvngfF6hwot1iAgbvOw45Xspi7q4TsS3uh65u1NNFAH/8d+Apfy5fR
9553RAOqhhk9jlF5WB5uN1qHo+6OwjK/HtxT5xt8ufqJJv+YBCcPl5DZtk7Q
GvwSw/rPhuHaiXCo1YKi1fV4Ub08L751iQ4kOuIk7wohZsFwPtrWXWiqWkxG
E9NYe/VPmODmBS9D/tHQV9+rP2tvhi+zy0GWb9Nhi1kwvPs8Hrx1BG9yHoY3
vaWgPNaEc2sjaL7lRIhfrAYfR4/C0TtuUZqnKkwcEMTtOB7NUz4Ii/1lwfet
tqjl6ivstj7r7DXhnvDobjQW/NzLQROWk13obVo2/BXtu2zNF7Zl0psAcyww
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
2ImPp46gh1496Of3TtGhZxQcH1FP4x6fFdz29Gb100cg5V0FGbw+JZ7yf0fG
alIs1xqDyRO10Dh+DJs3niabO9f4cOtSSlAwwwk27vxo6iR+YqgsLkwKI49K
BfHqXX/MKiilt1+bxVlTJ3JNxQKwqP3DB9oGCQmqg2ibkSJbdUJxbLStoHjQ
h0/UybKcniP1/uJHpm8dKHGhHZxVeEOJ30zwyVcVsOSDJdG5p2n9jS0lv+3v
0dXK/vBfka5gWPycBqmpck2YJUsZh1LRgIX8N94U+UEOJ/FMChxnx4smvYIV
wUFomjMMEi71xvlv0gTteh8K1zNkp1E3yfvOYD7+u0h00L7Di1ZVwPRrPvA8
8wHkGEXSp0BFSjnnL0ivuQ1bXCVsOCsQI+booXNOMH2fH1v89oYFD9GphZYm
LXBbq4ejB8VSxeE4WlWbBn69/EnhyUJ2MtzAeuc88ITvC47IkWUL3EjBSmHw
Iv0StxZXiX3c44SfVhEcte6OpMtKhqWiL8PKWRPFRXE9Ma/jFh09KcdqohE9
Kd7L234N4eXFOeL1MR646MlVMWBfBSVeN+D9nj9oXvtjcX1WAZXVhZHKXnXB
3LKD3k6OYLP+XmA95K9YdSEGV7RN5QN5L+HAo0Xi9NbBePXgCeH98SKoEj5S
ouZ6XGo3A2d4D2I9g1mcvqkOnDZEUee2ZjKIVxYMvEvo8dPut6t0B4YvGVLy
Uz6nZKaHNbq9tcClqQvJrjgS9MYegOUR0/maQyhIr1xIOmPKKeTLF/HdVmkM
TC/iBzPedTvCJqwJ/Exf7x9i4yP6mKiZCc9tTsPawFJJzZifQtPOkWTaI4wK
HLugQzObym30uNxBmSQfb0Djw+mUsCqq5IHq4e5c26J+3g9KL5PFmwqnqdR7
Ixkvz4Z3n6S4ue4hlO//JrR868uB3kacZ5gONY+TyNCylI72XoWOcxVZ9eJx
yL5lzetv/IUpHp1C2j99HhSwh2/PsOPbsocIXm6BHXec2bFfBpzzSS4Za/8U
Ek9XQ1+/HzTnVZfQ3vkHPke+FF5Zq3M9D+KQxpf03acAm+AaLF28DZsfZFPB
l5F8y/QM3/VRpPm/XWD9iyNoVDACtm6YyrlDJlPPp4/IvymE3s/JgNvPo+np
Nhl8f1WKKta/h6yfMWi84xiG65ni9OvNMPa2NsUscKL1e3qx4HFRyKpO56kD
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
ATTqVwk=
           "], "Biases" -> 
          RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 784,
           "$InputDimensions" -> {784}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{784}, NeuralNetworks`AtomT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
      "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
          "$Dimensions" -> {10}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
      "3" -> <|"Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
CgAAAAoAAAC1yy6+8HOfvHkjk73lwYA+Gw5MPhIk6D3sb6m+Na9avpqcOD+a
3Dw+xiXtPqYZAL493r69SR+Dvt9n9z18keU91Y4iPjde9rwB3i0/rTCZvNhn
cz4jGOK+IpZEvQkOdz5SDQk/bKeWPeXkuD5+hAW+DTASvsqWaz4uKsC+24w+
vcGugj7rFoW+c69OvhmADr8wcou+I+JhPQ1XsT5NpZ2+aMXbvgzkFz7xe8u9
KlhhPniX4jugFyy+XcPRPrOZnjzr4qM9EFtEPstTBr8X61W+RvcMPnflJr7E
wTO+Go3tPaSpB78+cDK+HkY8PrYhybyojjW+QqmqPrhZ4L12dok81twUP1CK
Hz5VGSW+zyAVvvSLI769H/K8DtvjPvVC8j6pYe++gJ0KPmYfW77IBUk+Hw3b
vMZJ3j4X17Y+QZ8/PVBVHL2+VTo+g2zwvlfIir0dOla/OZTxPugoPb6Y2cu+
+PQDP56E+j4gy06+IJxhvr6N9b5VW1q+e/s7vgXfTr4XXPy8i6a0Pu48mD64
rsA9PTHLkw==
           "], "Biases" -> 
          RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 10, 
          "$InputDimensions" -> {10}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
      "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
          "$Dimensions" -> {10}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>,
     "Edges" -> {
     NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Inputs", "Input"], 
      NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Outputs", "Output"] -> 
      NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
    "Inputs" -> <|
     "Input" -> NeuralNetworks`TensorT[{784}, NeuralNetworks`AtomT]|>, 
    "Outputs" -> <|
     "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, <|
   "Version" -> "13.3.0", "Unstable" -> False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9114016777097054`*^9, 3.911401735798337*^9, 
  3.91140176783396*^9, 3.911402384110459*^9, 3.911402569724554*^9, 
  3.911404758282336*^9, 3.9114054499887557`*^9, 3.9114809229181533`*^9, 
  3.911481913958584*^9, 3.911482259879161*^9, 3.9114823133387384`*^9, 
  3.9115636453392563`*^9, 3.9115639994878902`*^9, 3.911570461654365*^9, 
  3.9115749857628083`*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"89d33bee-2dc1-490e-a28a-60c5e6adf4ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"results", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", 
    RowBox[{"trainingdatainputs", "->", "trainingdataoutputs"}], ",", "All", 
    RowBox[{"(*", 
     RowBox[{"\"\<gives a \!\(\*TemplateBox[{
Cell[
TextData[\"NetTrainResultsObject\"]], \
\"paclet:ref/NetTrainResultsObject\"},\"RefLink\",BaseStyle->{\"InlineFormula\
\"}]\)[\!\(\*StyleBox[\"\[Ellipsis]\", \"TR\"]\)]that summarizes information \
about the training session\>\"", " ", "-", " ", 
      RowBox[{"Wolfram", " ", "Inbuilt", " ", "Library"}]}], "*)"}], ",", 
    RowBox[{"Method", "->", "\"\<SGD\>\""}], " ", 
    RowBox[{"(*", 
     RowBox[{"Short", " ", 
      RowBox[{"for", ":", " ", 
       RowBox[{"Stochastic", " ", "Gradient", " ", "Descent"}]}]}], "*)"}], 
    ",", 
    RowBox[{"MaxTrainingRounds", "->", "100"}], 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"This", " ", "can", " ", "be", " ", "changed"}], ",", " ", 
      RowBox[{"at", " ", "the", " ", "cost", " ", "of", " ", "time"}]}], 
     "*)"}], ",", 
    RowBox[{"TrainingProgressReporting", "->", "\"\<Panel\>\""}]}], 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "To", " ", "keep", " ", "track", " ", "of", " ", "the", " ", "progress", 
      " ", "the", " ", "NN", " ", "is", " ", 
      RowBox[{"at", ".", " ", "Mathematica"}], " ", "offers", " ", "some", 
      " ", "other", " ", "ones"}], ",", " ", 
     RowBox[{"but", " ", "panel", " ", "is", " ", "probably", " ", "the", " ", 
      RowBox[{"neatest", "."}]}]}], "*)"}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.9114017786613617`*^9, 3.9114017868281965`*^9}, {
  3.9145146109450703`*^9, 3.914514628724491*^9}, {3.9145148316167517`*^9, 
  3.914514865690979*^9}, {3.9145149066723337`*^9, 3.914514919734115*^9}, {
  3.914514963006173*^9, 
  3.9145149907969904`*^9}},ExpressionUUID->"4cead860-44df-4a34-9651-\
d2e4712f8267"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   TagBox["NetTrainResultsObject",
    "SummaryHead"], "NonInterpretableSummary"], 
  StyleBox["[", "NonInterpretableSummary"], 
  FrameBox[GridBox[{
     {
      ItemBox[
       FrameBox[
        StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
         StripOnInput->False,
         FontSize->12],
        FrameMargins->{{10, 5}, {-4, 2}},
        FrameStyle->None,
        StripOnInput->False],
       Alignment->{Left, Bottom},
       Background->RGBColor[0.96, 0.96, 0.96],
       Frame->{{False, False}, {True, False}},
       FrameStyle->Opacity[0.1],
       ItemSize->{Automatic, 1},
       StripOnInput->False]},
     {
      ItemBox[
       TagBox[
        FrameBox[
         TagBox[GridBox[{
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["summary"], 
                 TextCell["summary"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batches:"], 
                  TextCell["batches:"]], "375000"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["rounds:"], 
                  TextCell["rounds:"]], "100"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["time:"], 
                  TextCell["time:"]], 
                 InterpretationBox[
                  Cell["18min"], 
                  TextCell["18min"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["examples/s:"], 
                  TextCell["examples/s:"]], "22468"}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["data"], 
                 TextCell["data"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["training examples:"], 
                  TextCell["training examples:"]], "240000"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["processed examples:"], 
                  TextCell["processed examples:"]], "24000000"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["skipped examples:"], 
                  TextCell["skipped examples:"]], "0"}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["method"], 
                 TextCell["method"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["SGD"], 
                  TextCell["SGD"]], 
                 InterpretationBox[
                  Cell["optimizer"], 
                  TextCell["optimizer"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batch size"], 
                  TextCell["batch size"]], "64"}, "RowWithSeparators"], 
               InterpretationBox[
                Cell["CPU"], 
                TextCell["CPU"]]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["round"], 
                 TextCell["round"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                 TagBox[
                  InterpretationBox[
                   StyleBox[
                    RowBox[{"\"1.47\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], ShowStringCharacters -> 
                    False], 0.14740897081318158`, AutoDelete -> True], 
                  ScientificForm[#, 3]& ]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["error:"], 
                    TextCell["error:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"ErrorRate\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}], "Tooltip"]& ], 
                 InterpretationBox[
                  Cell["6.00%"], 
                  TextCell["6.00%"]]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             ItemBox[
              
              DynamicModuleBox[{NeuralNetworks`Private`NetTrain`index$$ = 1, 
               NeuralNetworks`Private`NetTrain`plotList$$ = {
                GeneralUtilities`TightLabeled[
                 Graphics[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1:eJw1VnlcjlkbTmTQWKKyJKP4QtKCJNJ7ta/q7V3qRdZUlGUsYzTTEEmMb758
1PQhsmSXJWNrcGrEWGZoEBJjmLbn2CLKEr5n7ue8zz/v7/0913Od65z7vq9z
2U2bq4k3NTExcWplYvLPb7T+n6dCdSW5Z8F6twdM+V+j8jo6/IebAx8yE3oa
VFMm7g49UfpQvH+tKvn248Ozdo/YgX3/PO9U3m+LplnHPGKtlA/QdCk34Mxq
43tTJG7tbub+2yMWQ9+bITjb6/pZj7+ZKcHbYb1N3j23zL9ZIeE7YLNq3pvY
9tXMQPiOaKXJPJ/tVy34u+BK7c/Pt/xYLfRYYENf5yltCqvZfvq+K1q79Y6y
vFst9Fui29RPz50eVjOC661gljGg6OKAGkbwfdbQ93Q4s3BvDftET3dYv3Mu
TrGsZTrC94Rfjukiv4hatpfwvRBWetm/96Ra9pHwNqhir6eXzqplWsLbwta+
7uKh47VsD+H7oHHimFWn/6plHwj/BfR7FzhrG418fZFQ7rGgh1mdWM8Os90e
tXz/oVbosYNl7fKq/1bWCr32WFs8emtx9zqxn34o+/X6kT/71In99kf6oCWu
h8fVifPoj0n7z51oWVcnzutf2Hsk1fHyzjpxng4oiyhvefW4TtTLAVebRlad
f1In6jUA87pgzevtdaJeA/HHsfSp7d/ViXoNxOE80y7/tqkX9RqEoTsbnI/b
1bPWhHdEwOgzPQoD69lBwjsi8LV3nNeMejaO8IMR3pK1PDG+nrUhvBM2TVqU
eW1TPTtEeCdcaDjUe+6Oejae8EPQzYVVLJD/mxHeGSyzq+bSxXp2mPDOKJRG
rp11qp5NILwLpufF5Z2qNupxRddfLD4GSka9rni0Ypy68n292I8rBo5fsWay
uST264ZB/21V1uwgifNww1+ZcbqTjfXivNxgX/CqsHVLvTjPoWhVfSjZvZMk
znsouv282HyfpSTqMRSx+VM7WAdLol7DkPb04PnUDpKo5zB8qXO3UPWQRL2H
odjJ3jN8liT6YRhs299zjNdKol+GQ1Pq3nO8QRL9NBwrzGdNjkmURH8OR2z4
5MO58n+lP92xfueosx+iJdGf7jjxx8Yvs1dLoj/d8Wn13D6xURLTEH4EvEoX
7wqZKLHdhB8Btfco25RcibUQfgRijw8Zm75BYlGE98DiLW2zH8j/dxHeAy6q
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
+zhJi4Dsj6qYJVzc11pMfl8yd6qsh+7zHC1GJu/o0fYrLvKqFtM/pFfOk/dL
eYBpYZO05FrD11zkBS3ik/de/z2RK3mCa+Gfsy1k9EtjXtXi3NwnFsvfiDxi
pcNnfV1GXJH9RckrOpgkuibekPVRnlHp0HGz3naQvD8lr+owu/2e1SUpXMlD
STp0Xdc07o6MV/KSDoZe/mbDQ7iSp3J0uPmm4tWzkVzkVR0O5h3DSnmeKa8y
HV6kFDvsm82VvFqhQ6x64rWEBK7kVa4DsvSrauT1lLyqQ0rQr7W5U7mSV630
GH+2LK8xnSt51VGPp2WdbEplPsqrKj0WWpYeTvw3F3lVj52jXtxv+z1X8mqS
HvO/rGw6upgreXWpHiG3ikZPkdenvJqjR1bz0wcLU7nIq3oYDgyyG7WSK3mV
6fFw6O1Z5dO4klcr9PBdNehC6jKu5FWux9T4KxZvF3GRV/WouHHsXuw8ruRV
q2jssTTrOtWfK3nVMRqhq/NTbaZzJa+qopGUd8v0itx/wSQ/Ggf6XFe3LOVs
M+mPxjirtwu2yft/SfqjUbXe/02hmrMg0i+/H3fnxBB5/vJIfzT63I7rFyPX
6wXpj8azjPIHk+T3gaQ/GnZT3HnxeM42kf5o3Ng1b71nMmcNpD8a8He12Cv3
YwDpj0HbX26uu/0NZxtJfwzGX+7v/NP/OHtO+mPk/hjy1GUNZ/6kPwZj3Ss2
39nP2QbSH4Mdt5ObkuT6PCP9MfC+8GK6biNnfqRfxndedDVc/v5/pD8GxX4v
nhzI4+wp6Y+B8/TnbbvGc+ZL+mMQ36rPs4VzOMsl/TGovLpnZTtZzxPSH4Pa
4236aHdz5kP6DbiTdt/eej1nP5J+Ayr6n57XehNnj0m/AXN3/hl/Xa4vSL8B
A5023PRZy1kO6Tdgz4Y5WStkvZz0G/Bb4YLLXeV5V5F+A5pLUrWH5X7IJv0G
OO6OujVcnneJ9BswQXPhxIEtnHmTfgN+H5C6bXguZ+tJvwFex8dva5b3W0/6
DXCZ16PRRcb/HwpNeRM=
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    Line[{}]}, {
                    AbsolutePointSize[4.5], 
                    Hue[0.59, 0.7, 0.65], 
                    Point[{}]}}}, Prolog -> {{
                    Text[20, 
                    Offset[{-2, -2}, {20., 0.012000000000000002`}], {1., 1.}], 
                    Text[40, 
                    Offset[{-2, -2}, {40., 0.012000000000000002`}], {1., 1.}], 
                    Text[60, 
                    Offset[{-2, -2}, {60., 0.012000000000000002`}], {1., 1.}], 
                    Text[80, 
                    Offset[{-2, -2}, {80., 0.012000000000000002`}], {1., 1.}], 
                    Text[100, 
                    Offset[{-2, -2}, {100., 0.012000000000000002`}], {1., 
                    1.}]}, {
                    Text[
                    Superscript[10, "-1"], 
                    Offset[{3, 0}, {0, -1.}], {-1, -1.}]}}, 
                  PlotRange -> {{0, 100.000133333333}, {-1.2120000000000002`, 
                    0.012000000000000002`}}, ImageSize -> {302, 182.}, 
                  GridLines -> {{20., 40., 60., 80., 100.}, {{-2., 
                    GrayLevel[0.3001]}, {-1., 
                    GrayLevel[0.3001]}, {-1.6989700043360185`, 
                    GrayLevel[0.8501]}, {-1.5228787452803374`, 
                    GrayLevel[0.8501]}, {-1.3979400086720375`, 
                    GrayLevel[0.8501]}, {-1.301029995663981, 
                    GrayLevel[0.8501]}, {-1.2218487496163564`, 
                    GrayLevel[0.8501]}, {-1.154901959985743, 
                    GrayLevel[0.8501]}, {-1.0969100130080565`, 
                    GrayLevel[0.8501]}, {-1.045757490560675, 
                    GrayLevel[0.8501]}, {-0.6989700043360187, 
                    GrayLevel[0.8501]}, {-0.5228787452803375, 
                    GrayLevel[0.8501]}, {-0.39794000867203755`, 
                    GrayLevel[0.8501]}, {-0.30102999566398114`, 
                    GrayLevel[0.8501]}, {-0.22184874961635626`, 
                    GrayLevel[0.8501]}, {-0.1549019599857432, 
                    GrayLevel[0.8501]}, {-0.09691001300805638, 
                    GrayLevel[0.8501]}, {-0.04575749056067506, 
                    GrayLevel[0.8501]}}}, Frame -> True, Axes -> None, 
                  AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRangePadding -> None, 
                  PlotRangeClipping -> True, Background -> GrayLevel[1], 
                  FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                  None], {None, "loss", "rounds"}], 
                GeneralUtilities`TightLabeled[
                 Graphics[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1: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
fA==
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    Line[{}]}, {
                    AbsolutePointSize[4.5], 
                    Hue[0.59, 0.7, 0.65], 
                    Point[{}]}}}, Prolog -> {{
                    Text[20, 
                    Offset[{-2, -2}, {20., 0.6060000000000001}], {1., 1.}], 
                    Text[40, 
                    Offset[{-2, -2}, {40., 0.6060000000000001}], {1., 1.}], 
                    Text[60, 
                    Offset[{-2, -2}, {60., 0.6060000000000001}], {1., 1.}], 
                    Text[80, 
                    Offset[{-2, -2}, {80., 0.6060000000000001}], {1., 1.}], 
                    Text[100, 
                    Offset[{-2, -2}, {100., 0.6060000000000001}], {1., 1.}]}, {
                    Text[
                    PercentForm[0.], 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}], 
                    Text[
                    PercentForm[0.2], 
                    Offset[{3, 0}, {0, 0.2}], {-1, -1.}], 
                    Text[
                    PercentForm[0.4], 
                    Offset[{3, 0}, {0, 0.4}], {-1, -1.}]}}, 
                  PlotRange -> {{0, 100.000133333333}, {-0.006000000000000001,
                     0.6060000000000001}}, ImageSize -> {302, 182.}, 
                  GridLines -> {{20., 40., 60., 80., 100.}, {{0., 
                    GrayLevel[0.8501]}, {0.05, 
                    GrayLevel[0.8501]}, {0.1, 
                    GrayLevel[0.8501]}, {0.15, 
                    GrayLevel[0.8501]}, {0.2, 
                    GrayLevel[0.8501]}, {0.2, 
                    GrayLevel[0.8501]}, {0.25, 
                    GrayLevel[0.8501]}, {0.3, 
                    GrayLevel[0.8501]}, {0.35, 
                    GrayLevel[0.8501]}, {0.4, 
                    GrayLevel[0.8501]}, {0.4, 
                    GrayLevel[0.8501]}, {0.45, 
                    GrayLevel[0.8501]}, {0.5, 
                    GrayLevel[0.8501]}, {0.55, 
                    GrayLevel[0.8501]}, {0.6, 
                    GrayLevel[0.8501]}, {0.6, 
                    GrayLevel[0.8501]}, {0.65, 
                    GrayLevel[0.8501]}, {0.7, 
                    GrayLevel[0.8501]}, {0.75, 
                    GrayLevel[0.8501]}, {0.8, 
                    GrayLevel[0.8501]}, {0., 
                    GrayLevel[0.3001]}, {0.2, 
                    GrayLevel[0.3001]}, {0.4, 
                    GrayLevel[0.3001]}, {0.6, 
                    GrayLevel[0.3001]}, {0.8, 
                    GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, 
                  AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRangePadding -> None, 
                  PlotRangeClipping -> True, Background -> GrayLevel[1], 
                  FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                  None], {None, "error rate", "rounds"}]}}, 
               TagBox[GridBox[{
                  {
                   DynamicBox[ToBoxes[
                    Grid[{{
                    Button[
                    MouseAppearance[
                    Style["\:2039", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ - 1, 2, 1], 
                    Appearance -> None], 
                    Dynamic[
                    Part[{
                    Tooltip["loss", 
                    Column[{
                    Row[{"Measurement: ", "loss"}]}]], 
                    Tooltip["error rate", 
                    Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}]]}, 
                    NeuralNetworks`Private`NetTrain`index$$], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetTrain`index$$}], 
                    Button[
                    MouseAppearance[
                    Style["\:203a", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ + 1, 2, 1], 
                    Appearance -> None]}}, ItemSize -> {{3, 20, 3}, {2}}, 
                    Alignment -> Center], StandardForm],
                    
                    ImageSizeCache->{
                    247.0402442932129, {8.276367593044416, 13.44238302097656}},
                    
                    TrackedSymbols:>{
                    NeuralNetworks`Private`NetTrain`index$$}]},
                  {
                   DynamicBox[ToBoxes[
                    Part[
                    NeuralNetworks`Private`NetTrain`plotList$$, 
                    NeuralNetworks`Private`NetTrain`index$$], StandardForm],
                    
                    ImageSizeCache->{
                    312.199275120728, {94.37734370762482, 98.5101561090909}},
                    TrackedSymbols:>{NeuralNetworks`Private`NetTrain`index$$}]}
                 },
                 DefaultBaseStyle->"Column",
                 GridBoxAlignment->{"Columns" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               DynamicModuleValues:>{}],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"},
            {
             ItemBox[
              
              InterpretationBox[Cell[
               "",ExpressionUUID->"efa50849-50c1-4ad0-9054-f7ba88200603"],
               TextCell[""]],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           ColumnsEqual->False,
           
           GridBoxAlignment->{
            "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
           GridBoxDividers->{"Columns" -> {False, {
                Opacity[0.15]}, False}},
           GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], 
               Offset[1.1199999999999999`], {
                Offset[1.75]}, 
               Offset[0.27999999999999997`]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.8]}, 
               Offset[0.2]}}],
          "Grid"],
         FrameMargins->{{10, 10}, {10, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       Alignment->Center,
       BaseStyle->{
        FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
         NumberMarks -> False, Deployed -> False},
       StripOnInput->False]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], 
        Offset[0.8], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Background->GrayLevel[1],
   FrameMargins->{{0, 0}, {0, 0}},
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False], 
  StyleBox["]", "NonInterpretableSummary"]}]], "Output",
 CellChangeTimes->{3.911402167990005*^9, 3.9114023703320804`*^9, 
  3.911402418922486*^9, 3.9114026148288813`*^9, 3.9114042865894623`*^9, 
  3.91140456338976*^9, 3.9114048366803503`*^9, 3.9114048759520597`*^9, 
  3.9114072998716908`*^9, 3.9114811192096643`*^9, 3.911482251893888*^9, 
  3.9114823050431986`*^9, 3.9114823956350985`*^9, 3.911565127253772*^9, 
  3.9115709861813264`*^9, 3.9115747899047527`*^9, 3.911576058108655*^9},
 CellLabel->
  "Out[106]=",ExpressionUUID->"87ba97b6-7d60-49de-bcf0-dcce34c95d2a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compare to Test Images", "Section",
 CellChangeTimes->{{3.9114811303878374`*^9, 3.911481139323027*^9}, {
  3.9114813185605974`*^9, 
  3.91148133380098*^9}},ExpressionUUID->"2afc2f32-b134-45c9-b9c9-\
7e9e8b141f14"],

Cell[BoxData[
 RowBox[{
  RowBox[{"imagesf2", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<C:\\\\Users\\\\Colin\\\\Desktop\\\\emnist-digits-test-images-idx3-\
ubyte\>\"", ",", "\"\<UnsignedInteger8\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9114811571140256`*^9, 3.911481196867807*^9}, 
   3.9114812429154034`*^9, {3.911481349384903*^9, 3.911481351836008*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"031fb3c1-373b-4bf1-a690-4d3ff55c9693"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"magicnumberlabels", "=", 
  RowBox[{"ImportByteArray", "[", 
   RowBox[{
    RowBox[{"ByteArray", "[", 
     RowBox[{
      RowBox[{"imagesf2", "\[LeftDoubleBracket]", 
       RowBox[{"1", ";;", "4"}], "\[RightDoubleBracket]"}], "//", "Reverse"}],
      "]"}], ",", "\"\<UnsignedInteger32\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9114813566277356`*^9, 3.911481360349779*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"b995aa67-845b-4a86-ab8a-87e2cbf3c93b"],

Cell[BoxData[
 RowBox[{"{", "2051", "}"}]], "Output",
 CellChangeTimes->{3.9114813618000712`*^9, 3.911570202002404*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"4885bcd1-7391-4033-b9a4-298afd172b06"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberofimages2", "=", 
  RowBox[{
   RowBox[{"ImportByteArray", "[", 
    RowBox[{
     RowBox[{"ByteArray", "[", 
      RowBox[{
       RowBox[{"imagesf2", "\[LeftDoubleBracket]", 
        RowBox[{"5", ";;", "8"}], "\[RightDoubleBracket]"}], "//", 
       "Reverse"}], "]"}], ",", "\"\<UnsignedInteger32\>\""}], "]"}], 
   "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]], "Input",
 CellChangeTimes->{{3.9114814091737585`*^9, 3.9114814112969418`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"161c615c-782f-4c86-af62-d44a32eef21b"],

Cell[BoxData["40000"], "Output",
 CellChangeTimes->{3.911481502675634*^9, 3.9115702020663233`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"eb73f0ef-08a8-43b0-831a-e1a35ffb7911"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"numberofrows2", "=", 
  RowBox[{
   RowBox[{"ImportByteArray", "[", 
    RowBox[{
     RowBox[{"ByteArray", "[", 
      RowBox[{
       RowBox[{"imagesf2", "\[LeftDoubleBracket]", 
        RowBox[{"9", ";;", "12"}], "\[RightDoubleBracket]"}], "//", 
       "Reverse"}], "]"}], ",", "\"\<UnsignedInteger32\>\""}], "]"}], 
   "\[LeftDoubleBracket]", "1", 
   "\[RightDoubleBracket]"}]}], "\[IndentingNewLine]", 
 RowBox[{"numberofcols2", "=", 
  RowBox[{
   RowBox[{"ImportByteArray", "[", 
    RowBox[{
     RowBox[{"ByteArray", "[", 
      RowBox[{
       RowBox[{"imagesf2", "\[LeftDoubleBracket]", 
        RowBox[{"13", ";;", "16"}], "\[RightDoubleBracket]"}], "//", 
       "Reverse"}], "]"}], ",", "\"\<UnsignedInteger32\>\""}], "]"}], 
   "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "  "}]}], "Input",
 CellChangeTimes->{{3.911481367705524*^9, 3.911481389205284*^9}, 
   3.9114814247919655`*^9, {3.9114814959843206`*^9, 3.911481523340611*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"3594e220-35c7-4014-8300-c4c3b1e8460a"],

Cell[BoxData["28"], "Output",
 CellChangeTimes->{{3.911481503663143*^9, 3.9114815251807423`*^9}, 
   3.911570202142218*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"cd229262-9f7e-4f17-af70-c61dcb0fb75b"],

Cell[BoxData["28"], "Output",
 CellChangeTimes->{{3.911481503663143*^9, 3.9114815251807423`*^9}, 
   3.9115702021542025`*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"db2638f2-d86c-4e44-8059-126495c39fca"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"datapixels2", "=", 
   RowBox[{"imagesf2", "\[LeftDoubleBracket]", 
    RowBox[{"17", ";;"}], "\[RightDoubleBracket]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9114815150658984`*^9, 3.9114815411670914`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"58e3f97b-4541-48ce-bf76-e071bde4a7a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"learnimages2", " ", "=", " ", 
   RowBox[{"ArrayReshape", "[", 
    RowBox[{"datapixels2", ",", 
     RowBox[{"{", 
      RowBox[{"numberofimages2", ",", " ", 
       RowBox[{"numberofrows2", "*", "numberofcols2"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.911481563704275*^9, 3.9114815727225313`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"5ef75ac3-c52f-4d57-aa56-40965e3a0f9d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"results", "[", "\"\<TrainedNet\>\"", "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Everthing", " ", "above", " ", "this", " ", "comment", " ", "in", " ", 
     "this", " ", "section", " ", "is", " ", "the", " ", "same", " ", "code", 
     " ", "as", " ", "in", " ", "the", " ", "previous", " ", "sections"}], 
    ",", " ", 
    RowBox[{
     RowBox[{"there", "'"}], "s", " ", "nothing", " ", "new", " ", "besides", 
     " ", "the", " ", "2", " ", "added", " ", "to", " ", "the", " ", "end", 
     " ", "to", " ", "differentiate", " ", "them", " ", "from", " ", "the", 
     " ", "previous", " ", 
     RowBox[{"sections", "'"}], " ", 
     RowBox[{"variables", "."}]}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.911481051787334*^9, 3.911481065826245*^9}, {
  3.914515011515276*^9, 3.914515098773249*^9}, {3.914515485049759*^9, 
  3.9145154950335927`*^9}},ExpressionUUID->"ce745236-5e1d-40a7-9558-\
b39f76ba7840"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetChain",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.014925373134328358`], {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                CurveClosed -> {0}]}, {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[0.631, 0.8160000000000001, 0.498], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.40800000000000003`, 0.627, 0.196], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {15., 
                79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 103.}, {23.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.38, 0.753, 0.89], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.24300000000000002`, 0.608, 0.71], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {29., 
                79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 103.}, {37.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.584, 0.51, 0.8390000000000001], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.4, 0.396, 0.659], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {43., 
                79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 103.}, {51.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.549, 0.549, 0.549], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25., 
                95.}, {25., 88.}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39., 
                95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
             ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                   StyleBox["\"(\[VeryThinSpace]size: 784\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                   StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.014925373134328358`], {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                CurveClosed -> {0}]}, {
               RGBColor[0.729, 0.729, 0.729], 
               Thickness[0.018686567164179105`], 
               Opacity[1.], 
               JoinForm[{"Miter", 10.}], 
               
               JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                CurveClosed -> {0}]}, {
               FaceForm[{
                 RGBColor[0.631, 0.8160000000000001, 0.498], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.40800000000000003`, 0.627, 0.196], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {15., 
                79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 103.}, {23.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.38, 0.753, 0.89], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.24300000000000002`, 0.608, 0.71], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {29., 
                79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 103.}, {37.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.584, 0.51, 0.8390000000000001], 
                 Opacity[1.]}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
               FaceForm[{
                 RGBColor[0.4, 0.396, 0.659], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {43., 
                79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 103.}, {51.,
                 103.}}}]}, {
               FaceForm[{
                 RGBColor[0.549, 0.549, 0.549], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25., 
                95.}, {25., 88.}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39., 
                95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
             ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
            GridBox[{{
               TagBox[
                
                DynamicModuleBox[{
                 NeuralNetworks`Private`NetChain`assoc3 = <|
                   "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 784}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 784, "$InputDimensions" -> {784}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{784}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 10}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{784}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                  NeuralNetworks`Private`NetChain`opart, 
                  NeuralNetworks`Private`NetChain`part, 
                  NeuralNetworks`Private`NetChain`selected = Null}, 
                 DynamicBox[
                  GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 784\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridFrameMargins -> {{0, 0}, {0, 0}}], 
                  TrackedSymbols :> {
                   NeuralNetworks`Private`NetChain`selected}], 
                 Initialization :> {NetChain}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetChain[<|
   "Type" -> "Chain", 
    "Nodes" -> <|
     "1" -> <|"Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
fJ7qWXoBiV4foAT228iadS7kP3bdnYI=
           "], "Biases" -> 
          RawArray["Real32",{0.00025944784283638, -0.005206735339015722, 
            0.00021493982058018446`, -0.021619612351059914`, \
-0.00012978726590517908`, -0.0002081189159071073, 0.005265307612717152, 
            0.010834419168531895`, -0.00021376008226070553`, \
-0.0001942383241839707}]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 784,
           "$InputDimensions" -> {784}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{784}, NeuralNetworks`AtomT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
      "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
          "$Dimensions" -> {10}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
      "3" -> <|"Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBvgFB/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
CgAAAAoAAADjOuq/LlVkwIdl5L/pEcU/u6Q5PlqwnD3N+IDAB1VlQKbLNj91
XjA+B8qKvJuIUT+6Ixq/AvT3wH7s3T10iY89j3MBQGrf6T+yFiw/hGfpvGA7
2r93s41AWeYCwAS3XkBC7gM/1kUcPUqgqT76xLvAVPsWvjrNXD5JQGrAH0mS
QGcBRcB9qhlACZBUvoM/E7/2N5LAmDWUQNgFsD6uFqC+6ZM1wIdHoMAfcSTA
bxNgQN7uDbxQxmC+Zv2TQHGXfr8vOZc9DW82PplE47/t5B/AP3qQv8EtHz8n
mjm+tm7UPVoMWMBAPUxAAgI4PmTn97yzFGI/LsG4wOHGaD8f1UG/FdQPP7Nc
6D1qwobAEWrLwBKTJ74K9CW9Atm3wCcgmEBkJ9bAHOutQKmmZ747qhI+Q9Co
QNvmkUCE7LM+VAoNPfxbB8AaegvAqEckwHqgJEANwli/hB3YPi6B0z9TGdc/
+6QCP7cQ9D6qr3PAoF78vzcEhMBFhm1A47dBvlnObL55/oVADsxDQM4olj42
aa89zK/FFw==
           "], "Biases" -> 
          RawArray[
            "Real32",{-1.7428289651870728`, -0.5424835681915283, \
-2.0337817668914795`, -3.347111463546753, -2.5061662197113037`, \
-1.2895108461380005`, 
            0.9829757809638977, -6.269063472747803, -2.1333556175231934`, \
-3.666248321533203}]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 10, 
          "$InputDimensions" -> {10}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
      "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
          "$Dimensions" -> {10}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>,
     "Edges" -> {
     NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Inputs", "Input"], 
      NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Outputs", "Output"] -> 
      NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
    "Inputs" -> <|
     "Input" -> NeuralNetworks`TensorT[{784}, NeuralNetworks`AtomT]|>, 
    "Outputs" -> <|
     "Output" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, <|
   "Version" -> "13.3.0", "Unstable" -> False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.911481643582209*^9, 3.911482403818885*^9, 
  3.9115702024018693`*^9, 3.9115710001622777`*^9, 3.911574796817692*^9, 
  3.9115749443411217`*^9, 3.9115761476906376`*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"b82d6fe9-79ed-4b2f-b63e-9a36a14ec47e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ArrayReshape", "[", 
    RowBox[{
     RowBox[{
     "learnimages2", "\[LeftDoubleBracket]", "40000", 
      "\[RightDoubleBracket]"}], ",", 
     RowBox[{"{", 
      RowBox[{"numberofrows2", ",", "numberofcols2"}], "}"}]}], "]"}], "//", 
   "Transpose"}], "//", "ArrayPlot", " ", 
  RowBox[{"(*", 
   RowBox[{
   "A", " ", "visualization", " ", "of", " ", "what", " ", "the", " ", 
    "image", " ", "the", " ", "Neural", " ", "Network", " ", "is", " ", 
    "looking", " ", "at"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.911481668955204*^9, 3.9114816764490366`*^9}, {
   3.9114817429356594`*^9, 3.911481743448572*^9}, {3.9114817776002903`*^9, 
   3.9114818000144215`*^9}, {3.9114818316614494`*^9, 
   3.9114818737918158`*^9}, {3.9114824111447067`*^9, 
   3.9114824117078924`*^9}, {3.911482447730446*^9, 3.911482517166235*^9}, {
   3.91157021514369*^9, 3.9115702923491955`*^9}, {3.9115703404170914`*^9, 
   3.911570363402774*^9}, {3.9115703980910053`*^9, 3.9115704339150023`*^9}, 
   3.9115710443384275`*^9, {3.9115748301399393`*^9, 3.91157486044271*^9}, {
   3.911574902787113*^9, 3.9115749580143986`*^9}, {3.9115761562976556`*^9, 
   3.9115762729146185`*^9}, {3.9115763226328983`*^9, 
   3.9115763228797164`*^9}, {3.9115763774482927`*^9, 
   3.9115764434324007`*^9}, {3.9115764805707445`*^9, 
   3.9115765496056604`*^9}, {3.91157658089564*^9, 3.911576581336113*^9}, {
   3.911576617162403*^9, 3.9115766668526745`*^9}, {3.911576749862851*^9, 
   3.911576750135347*^9}, {3.9115767857625875`*^9, 3.911576828091298*^9}, {
   3.9115769063309536`*^9, 3.9115769562303925`*^9}, {3.9115769943052034`*^9, 
   3.9115770652537146`*^9}, {3.9115770954811144`*^9, 
   3.9115772857959323`*^9}, {3.911577371242962*^9, 3.9115773725116177`*^9}, {
   3.9115774625028915`*^9, 3.9115774631485033`*^9}, {3.9144320265816755`*^9, 
   3.9144320396455617`*^9}},ExpressionUUID->"59e2a50a-c5f3-4ecb-9b0a-\
c77925940dfb"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmJiYGCQgeL/1AHf33/HJXW/Kanp3j/suhp5WbgTX2PXZsIkrOjx
AKvcLTXW/F33f+GQ4+q+/Rur1L/Tioqnv6IJ/v396hYQnI7mEJ1/+9dvIIDJ
/Li7tidYQ01NTZGDkUnJr66hoan34g+Ipk2mYlysYMDMwMjKzsnGysZluOUv
SO53Mzsjs11tQ0NDnQOzcG5dsbEYG6vUerDc33VSzMzep7/+/v2tjlXt2rdv
d9c2NUyCBsAlRxF2xZaX//7/bmDVuPX7P8hhME/+ulNvwyleffHljwaO4Fd/
0fzw+kI0D5d+6PZqrjrMQPl3r1Gfk93Bjr0BW6h8vxCtwsLMilXu/787S1SY
WLGYCZb8tkSFxe829nj/dyeGS2nJPaxyIElu0z7scfT/3+1A7UYccv//7C1d
8AeH3P+/Hz7hkiIeAACYZY9P
   "], {{0, 0}, {28, 28}}, {0, 255}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{
  3.9115748762531586`*^9, {3.9115749128992324`*^9, 3.9115749582734523`*^9}, {
   3.9115761509293776`*^9, 3.9115762122078247`*^9}, {3.911576243682476*^9, 
   3.9115762732150707`*^9}, 3.911576324162422*^9, {3.9115763783973136`*^9, 
   3.9115764438202477`*^9}, {3.911576481357538*^9, 3.911576550060136*^9}, 
   3.911576582176215*^9, {3.9115766177241745`*^9, 3.9115766674149466`*^9}, 
   3.911576752969446*^9, {3.911576786521127*^9, 3.9115768284246902`*^9}, {
   3.911576907211337*^9, 3.9115769564828444`*^9}, {3.9115769948103256`*^9, 
   3.9115770659532022`*^9}, {3.9115770972720866`*^9, 3.911577286358348*^9}, 
   3.9115773731507587`*^9, 3.9115774639511166`*^9},
 CellLabel->
  "Out[253]=",ExpressionUUID->"b9effc34-3d0a-4c8d-ad79-e81c95dfbbfd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"trained", "[", 
   RowBox[{"learnimages2", "[", 
    RowBox[{"[", "40000", "]"}], "]"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "The", " ", "probabilities", " ", "that", " ", "the", " ", "Neural", " ", 
     "Network", " ", "has", " ", "foreach", " ", "digit"}], ",", " ", 
    RowBox[{"going", " ", "in", " ", "order"}], ",", " ", 
    RowBox[{"from", " ", "0", " ", "to", " ", "9"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.9114810712116394`*^9, 3.911481077937559*^9}, {
   3.9114816902477617`*^9, 3.9114816979847803`*^9}, {3.9114817486600485`*^9, 
   3.9114818245730352`*^9}, {3.9114818588376274`*^9, 
   3.9114818783389053`*^9}, {3.911482416693198*^9, 3.9114824392401724`*^9}, {
   3.911482471483054*^9, 3.9114825296151686`*^9}, {3.911570222018258*^9, 
   3.911570263869157*^9}, {3.9115703463925056`*^9, 3.911570367917328*^9}, {
   3.9115704055686913`*^9, 3.91157040574154*^9}, {3.91157043784875*^9, 
   3.911570438254574*^9}, 3.9115710331987686`*^9, {3.91157483373265*^9, 
   3.9115748338579736`*^9}, {3.911574864123125*^9, 3.9115748642587376`*^9}, {
   3.9115749069808645`*^9, 3.9115749074287148`*^9}, {3.91157493867819*^9, 
   3.911574961443688*^9}, {3.9115761611076303`*^9, 3.911576215869217*^9}, {
   3.9115762579820347`*^9, 3.911576279562867*^9}, {3.9115763283561015`*^9, 
   3.911576328611349*^9}, {3.9115763820934596`*^9, 3.9115764480443425`*^9}, {
   3.911576486476816*^9, 3.911576555254286*^9}, {3.911576585703139*^9, 
   3.911576586829814*^9}, {3.9115766215160427`*^9, 3.9115766715104394`*^9}, {
   3.911576759792656*^9, 3.9115768080710526`*^9}, {3.911576882383277*^9, 
   3.911576960514944*^9}, {3.911576998543374*^9, 3.911577308921405*^9}, {
   3.911577376129427*^9, 3.9115773768302174`*^9}, {3.911577467119301*^9, 
   3.9115774681125975`*^9}, {3.9144320441118174`*^9, 3.914432077608564*^9}, {
   3.914515504357971*^9, 
   3.914515508632789*^9}},ExpressionUUID->"df93918c-148e-416f-9452-\
eac454c1e144"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.013863340951502323`", ",", "0.006303913425654173`", ",", 
   "0.000393277412513271`", ",", "0.0004891977878287435`", ",", 
   "0.3140283524990082`", ",", "0.022831991314888`", ",", 
   "0.00019356573466211557`", ",", "0.031164685264229774`", ",", 
   "0.2869826853275299`", ",", "0.344931036233902`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.9114817014595165`*^9, {3.9114817497972555`*^9, 3.9114818248656654`*^9}, {
   3.9114818601266537`*^9, 3.911481878963909*^9}, {3.9114824208020597`*^9, 
   3.9114825303595867`*^9}, 3.91148263937201*^9, {3.9115702026095934`*^9, 
   3.9115702641708236`*^9}, {3.9115703469018726`*^9, 3.911570368132352*^9}, 
   3.9115704061949663`*^9, 3.911570438478774*^9, {3.911571007196834*^9, 
   3.911571033880045*^9}, 3.9115748091094575`*^9, 3.911574839553892*^9, 
   3.9115748859985037`*^9, {3.9115749163824463`*^9, 3.911574961724368*^9}, {
   3.9115761620598097`*^9, 3.9115762162617593`*^9}, {3.9115762583638773`*^9, 
   3.9115762798302236`*^9}, 3.9115763312836475`*^9, {3.9115763836072054`*^9, 
   3.911576449221151*^9}, {3.9115764885386314`*^9, 3.9115765555180817`*^9}, 
   3.9115765874627075`*^9, {3.9115766221250076`*^9, 3.9115766718641844`*^9}, 
   3.911576760745017*^9, {3.911576790941261*^9, 3.9115768084546757`*^9}, {
   3.9115768873310633`*^9, 3.9115769607460737`*^9}, {3.911576999048607*^9, 
   3.911577309604178*^9}, 3.9115773771952286`*^9, 3.9115774683848047`*^9},
 CellLabel->
  "Out[254]=",ExpressionUUID->"0a398ea7-ec96-43c4-8e70-b8c02841d1fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Max", "[", 
   RowBox[{"trained", "[", 
    RowBox[{"learnimages2", "[", 
     RowBox[{"[", "40000", "]"}], "]"}], "]"}], "]"}], 
  RowBox[{"(*", 
   RowBox[{"Maximum", " ", "of", " ", "the", " ", "previous", " ", 
    RowBox[{"line", " ", "--"}], " ", "makes", " ", "it", " ", "easier", " ", 
    "to", " ", "tell", " ", "which", " ", "value", " ", "the", " ", 
    "computer", " ", "thinks", " ", "it", " ", "is"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.9114817047518497`*^9, 3.911481735604195*^9}, {
   3.911570230961235*^9, 3.9115702708462915`*^9}, {3.9115703539602585`*^9, 
   3.9115703722247705`*^9}, {3.911570415587205*^9, 3.9115704158728323`*^9}, {
   3.9115710374734173`*^9, 3.911571037835394*^9}, {3.9115748373846083`*^9, 
   3.9115748374792747`*^9}, {3.9115748677790394`*^9, 
   3.9115748681427546`*^9}, {3.911574909745145*^9, 3.911574910071726*^9}, {
   3.9115749529424562`*^9, 3.9115749532749577`*^9}, {3.9115761675058937`*^9, 
   3.9115762216698246`*^9}, {3.9115762631245747`*^9, 
   3.9115762837526374`*^9}, {3.91157633409617*^9, 3.9115763347011633`*^9}, {
   3.911576386561677*^9, 3.911576451772895*^9}, {3.911576491170396*^9, 
   3.911576558853717*^9}, {3.911576590373071*^9, 3.9115765908017893`*^9}, {
   3.911576624447753*^9, 3.9115766758941603`*^9}, {3.911576763210131*^9, 
   3.911576811389531*^9}, {3.911576890940449*^9, 3.911576964290208*^9}, {
   3.911577001986573*^9, 3.911577002341397*^9}, {3.911577033519747*^9, 
   3.911577293928298*^9}, {3.911577383072569*^9, 3.911577383754718*^9}, {
   3.9115774706944337`*^9, 3.9115774716990304`*^9}, {3.9144319808496857`*^9, 
   3.9144320206964183`*^9}, 
   3.9145155155953197`*^9},ExpressionUUID->"479c4a73-9cd0-4705-ba40-\
9fed4d2c6f06"],

Cell[BoxData["0.344931036233902`"], "Output",
 CellChangeTimes->{{3.9114817144058743`*^9, 3.9114818272829237`*^9}, {
   3.911481863606485*^9, 3.9114818824863615`*^9}, 3.911482425295076*^9, {
   3.9114824557837124`*^9, 3.9114825122137957`*^9}, 3.911482640559806*^9, {
   3.911570202713458*^9, 3.9115702714361753`*^9}, {3.911570354859033*^9, 
   3.911570372935254*^9}, 3.911570416501339*^9, {3.9115710099064484`*^9, 
   3.9115710383830233`*^9}, 3.9115748099226737`*^9, 3.911574840438742*^9, 
   3.911574887236061*^9, 3.9115749179458447`*^9, {3.9115749486681137`*^9, 
   3.9115749538452053`*^9}, {3.911576169569395*^9, 3.91157622242679*^9}, {
   3.9115762635639486`*^9, 3.9115762840018167`*^9}, 3.911576335204136*^9, {
   3.911576387415665*^9, 3.9115764521350994`*^9}, {3.911576492469805*^9, 
   3.9115765590888224`*^9}, 3.9115765912438374`*^9, {3.91157662509485*^9, 
   3.911576676217497*^9}, {3.9115767645139847`*^9, 3.9115768117833643`*^9}, {
   3.91157689169094*^9, 3.9115769644623337`*^9}, 3.9115770026372538`*^9, {
   3.911577034475315*^9, 3.911577294165708*^9}, 3.9115773845049887`*^9, 
   3.911577471929876*^9},
 CellLabel->
  "Out[255]=",ExpressionUUID->"9e0db90f-39a5-485d-9dd8-fcddab21ac6b"]
}, Open  ]],

Cell[TextData[{
 "Even setting the hidden data down to only 1 neuron, I cannot seem to make \
the inputted data go above 10% error, at least within the NN panel. Testing \
the error using percent error and hand verifying 39 points (starting from \
part 1,000 going in steps of 1,000 to 40,000) gives a percent error of 26%, \
as seen below. While not the whole array, it would seem that  10 neurons \
gives the Neural Network approximately 26% error, assuming it holds for the \
other parts of the array. 11 or more should see a drastic decrease in the \
percent error, with 20 neurons seemingly eliminating it outright, as one \
digit would very clearly be greater than the others (usually a large number, \
like 97, compared to some decimals in the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", 
    RowBox[{"-", "3"}]], TraditionalForm]],ExpressionUUID->
  "e5781b30-26fb-4d62-832e-dbeee16d45aa"],
 " to ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", 
    RowBox[{"-", "6"}]], TraditionalForm]],ExpressionUUID->
  "67f743b0-2ac6-49b5-be97-15913783aaf1"],
 " range) for each part of the array. "
}], "Text",
 CellChangeTimes->{{3.9114826454716463`*^9, 3.9114826753187265`*^9}, {
  3.9114833256438427`*^9, 3.911483348234639*^9}, {3.9115704489367595`*^9, 
  3.9115704948958855`*^9}, {3.911577327604502*^9, 3.9115773670425043`*^9}, {
  3.9115774267419496`*^9, 3.911577440087432*^9}, {3.9115774764086685`*^9, 
  3.9115774906891084`*^9}, {3.911577547026717*^9, 3.9115775775955915`*^9}, {
  3.9115776100319777`*^9, 3.911577634193241*^9}, {3.911577752068656*^9, 
  3.91157776058304*^9}, {3.911577791295257*^9, 3.911577835258193*^9}, {
  3.911577873417721*^9, 3.911577948446554*^9}, {3.911578056946762*^9, 
  3.911578083894884*^9}, {3.914370135327549*^9, 
  3.914370139862486*^9}},ExpressionUUID->"a3455fbe-53c6-41ab-9298-\
55b560fc7688"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"NumberCorrect", "=", " ", "23"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NumberIncorrect", "=", "17"}], ";"}]}], "Input",
 CellChangeTimes->{{3.9115710594212337`*^9, 3.9115710877504888`*^9}, {
   3.9115748526955495`*^9, 3.91157485357937*^9}, {3.911574892319826*^9, 
   3.911574897533943*^9}, {3.9115749285955544`*^9, 3.911574928921595*^9}, 
   3.9115761397675686`*^9, {3.911576172842162*^9, 3.9115761911691074`*^9}, 
   3.9115762356475124`*^9, {3.9115762681302085`*^9, 3.911576295230587*^9}, {
   3.911576353654602*^9, 3.9115763540291605`*^9}, {3.9115763978713937`*^9, 
   3.9115764668286333`*^9}, {3.911576506129633*^9, 3.9115765454107013`*^9}, {
   3.9115765766829343`*^9, 3.9115765769056478`*^9}, {3.911576610942466*^9, 
   3.911576683325708*^9}, {3.911576775548472*^9, 3.911576818233955*^9}, {
   3.911576896058661*^9, 3.9115769518023252`*^9}, {3.9115769891475782`*^9, 
   3.9115773050087543`*^9}, {3.9115773893556695`*^9, 3.911577389668704*^9}, {
   3.9115774444433565`*^9, 3.9115774545363817`*^9}, {3.9115776474160066`*^9, 
   3.911577652630002*^9}},
 CellLabel->
  "In[259]:=",ExpressionUUID->"701f177f-af56-4496-91b3-e3fc99615cb5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PercentError", "=", 
  RowBox[{"N", "[", 
   RowBox[{"Abs", "[", 
    FractionBox[
     RowBox[{"NumberIncorrect", "-", "NumberCorrect"}], "NumberCorrect"], 
    "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9114996240820303`*^9, 3.911499643856638*^9}, {
  3.9114997824604406`*^9, 3.911499786663573*^9}, {3.911499990328434*^9, 
  3.9114999940911727`*^9}, {3.9115769758789573`*^9, 3.9115769789535837`*^9}, {
  3.911577398240279*^9, 3.911577419034496*^9}, {3.911577654456415*^9, 
  3.91157765551377*^9}, {3.9145151085421276`*^9, 
  3.914515150665229*^9}},ExpressionUUID->"acd9ef98-dc11-4b85-9c54-\
303fdfce7bda"],

Cell[BoxData["0.2608695652173913`"], "Output",
 CellChangeTimes->{
  3.911570202790476*^9, {3.9115773919222903`*^9, 3.9115774569512744`*^9}, {
   3.911577648965495*^9, 3.9115776559831944`*^9}},
 CellLabel->
  "Out[261]=",ExpressionUUID->"f99bb8e4-9f85-40c4-9e4d-aabdbbc7d4ba"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1141.2, 574.8},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (July 24, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"840e350c-38b7-4068-a429-a7138a693930"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 209, 4, 67, "Section",ExpressionUUID->"2229586a-c2fd-4483-86d2-d57bbc1386c2"],
Cell[792, 28, 736, 17, 48, "Input",ExpressionUUID->"08be7b90-b091-4f52-8f63-56514fb63c16"],
Cell[CellGroupData[{
Cell[1553, 49, 543, 12, 28, "Input",ExpressionUUID->"7b6cf7e2-c330-43e7-8dca-5b6fa4bee2ff"],
Cell[2099, 63, 1325, 19, 52, "Output",ExpressionUUID->"3ca05784-4456-449d-9e06-b5103114e37b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3461, 87, 1183, 25, 67, "Input",ExpressionUUID->"ee4442c2-7eda-45a8-a5a8-d2eda7be110c"],
Cell[4647, 114, 366, 6, 32, "Output",ExpressionUUID->"cc0a79d1-89bc-4edf-8b20-6e88f58cb22d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5050, 125, 685, 16, 48, "Input",ExpressionUUID->"ffc116bd-6068-4227-831d-94ab984599c3"],
Cell[5738, 143, 406, 7, 32, "Output",ExpressionUUID->"14697fe1-2f5c-48a0-8016-e6b0b8f260f9"]
}, Open  ]],
Cell[6159, 153, 651, 17, 28, "Input",ExpressionUUID->"137ced53-1e91-48f8-994c-b203cabc7fad"],
Cell[CellGroupData[{
Cell[6835, 174, 689, 14, 28, "Input",ExpressionUUID->"a9d8c9ea-65a2-4877-9107-3c003a413cd8"],
Cell[7527, 190, 425, 6, 32, "Output",ExpressionUUID->"4eca02cc-e28c-4c5a-91f0-ef5581145524"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8001, 202, 260, 4, 67, "Section",ExpressionUUID->"36c8ea07-42d2-45cf-890b-0362355febb1"],
Cell[8264, 208, 736, 17, 48, "Input",ExpressionUUID->"423873e0-ef0a-4a08-9679-230e2dce33db"],
Cell[CellGroupData[{
Cell[9025, 229, 786, 17, 48, "Input",ExpressionUUID->"80551ed2-6d66-4782-a101-947246ddf392"],
Cell[9814, 248, 249, 4, 32, "Output",ExpressionUUID->"9c7ac375-9aa2-4b01-ad38-03fcdcc7541a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10100, 257, 777, 18, 48, "Input",ExpressionUUID->"51eec9c4-a755-4d76-a3c3-6c36b8588574"],
Cell[10880, 277, 253, 3, 32, "Output",ExpressionUUID->"4bc2815f-4ce6-4a4e-9384-c38dff2b7206"]
}, Open  ]],
Cell[11148, 283, 687, 19, 28, "Input",ExpressionUUID->"f2f780c1-8c37-41dc-a5a9-d6d05c54df67"],
Cell[11838, 304, 936, 23, 28, "Input",ExpressionUUID->"7d687d12-93fe-48e0-930c-4b21ede2cf9b"],
Cell[CellGroupData[{
Cell[12799, 331, 461, 10, 28, "Input",ExpressionUUID->"a8ad2123-abb6-4546-b9a9-260d28ca4cee"],
Cell[13263, 343, 7795, 206, 204, "Output",ExpressionUUID->"2fdcdb45-ef83-4740-970e-a0d7290a904f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21095, 554, 2793, 65, 124, "Input",ExpressionUUID->"3eea2b0b-bb6d-49f9-bba2-a4c73aadc28d"],
Cell[23891, 621, 379, 6, 32, "Output",ExpressionUUID->"c2eaf14b-d0dd-49ad-bc3e-3caaae6e9163"],
Cell[24273, 629, 379, 6, 32, "Output",ExpressionUUID->"e548d72a-dad7-430b-9b72-c244a7b6e875"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[24701, 641, 164, 3, 67, "Section",ExpressionUUID->"f47e82c5-a8c6-4e63-8834-5eee0bb5b96c"],
Cell[24868, 646, 1184, 25, 67, "Input",ExpressionUUID->"39d58ae2-1660-4599-83ba-a88deac9121f"],
Cell[CellGroupData[{
Cell[26077, 675, 714, 16, 48, "Input",ExpressionUUID->"902f0eb9-1cf9-41de-8964-8123b9652c42"],
Cell[26794, 693, 253, 5, 32, "Output",ExpressionUUID->"276156e2-baf1-4b6e-8b1c-da719706339a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27084, 703, 1301, 30, 67, "Input",ExpressionUUID->"3dd615db-fe4a-47bf-a9ce-674f1984bcac"],
Cell[28388, 735, 1282, 27, 376, "Output",ExpressionUUID->"2ea0ee85-1de6-4a7e-a266-5f3afd9d252e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[29719, 768, 149, 3, 67, "Section",ExpressionUUID->"0095bd99-e99c-4f9a-a244-13a5d346618e"],
Cell[29871, 773, 394, 10, 28, "Input",ExpressionUUID->"461a0544-e9aa-47f3-b44d-e7389bdb6573"],
Cell[30268, 785, 359, 9, 28, "Input",ExpressionUUID->"bb597dcd-7779-4083-ad52-d96e628d2d23"],
Cell[30630, 796, 1856, 39, 86, "Input",ExpressionUUID->"e3db0afa-cc1f-4a78-a177-966e16a5679f"],
Cell[CellGroupData[{
Cell[32511, 839, 2389, 48, 219, "Input",ExpressionUUID->"85174028-ffb1-4de7-919a-1f443444b514"],
Cell[34903, 889, 65861, 1176, 62, "Output",ExpressionUUID->"89d33bee-2dc1-490e-a28a-60c5e6adf4ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100801, 2070, 1878, 40, 112, "Input",ExpressionUUID->"4cead860-44df-4a34-9651-d2e4712f8267"],
Cell[102682, 2112, 27821, 567, 463, "Output",ExpressionUUID->"87ba97b6-7d60-49de-bcf0-dcce34c95d2a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[130552, 2685, 219, 4, 67, "Section",ExpressionUUID->"2afc2f32-b134-45c9-b9c9-7e9e8b141f14"],
Cell[130774, 2691, 472, 9, 28, "Input",ExpressionUUID->"031fb3c1-373b-4bf1-a690-4d3ff55c9693"],
Cell[CellGroupData[{
Cell[131271, 2704, 486, 10, 28, "Input",ExpressionUUID->"b995aa67-845b-4a86-ab8a-87e2cbf3c93b"],
Cell[131760, 2716, 198, 3, 32, "Output",ExpressionUUID->"4885bcd1-7391-4033-b9a4-298afd172b06"]
}, Open  ]],
Cell[CellGroupData[{
Cell[131995, 2724, 565, 12, 28, "Input",ExpressionUUID->"161c615c-782f-4c86-af62-d44a32eef21b"],
Cell[132563, 2738, 177, 2, 32, "Output",ExpressionUUID->"eb73f0ef-08a8-43b0-831a-e1a35ffb7911"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132777, 2745, 1065, 24, 48, "Input",ExpressionUUID->"3594e220-35c7-4014-8300-c4c3b1e8460a"],
Cell[133845, 2771, 202, 3, 32, "Output",ExpressionUUID->"cd229262-9f7e-4f17-af70-c61dcb0fb75b"],
Cell[134050, 2776, 204, 3, 32, "Output",ExpressionUUID->"db2638f2-d86c-4e44-8059-126495c39fca"]
}, Open  ]],
Cell[134269, 2782, 323, 6, 28, "Input",ExpressionUUID->"58e3f97b-4541-48ce-bf76-e071bde4a7a1"],
Cell[134595, 2790, 437, 10, 28, "Input",ExpressionUUID->"5ef75ac3-c52f-4d57-aa56-40965e3a0f9d"],
Cell[CellGroupData[{
Cell[135057, 2804, 981, 20, 48, "Input",ExpressionUUID->"ce745236-5e1d-40a7-9558-b39f76ba7840"],
Cell[136041, 2826, 66675, 1191, 62, "Output",ExpressionUUID->"b82d6fe9-79ed-4b2f-b63e-9a36a14ec47e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202753, 4022, 1944, 36, 48, "Input",ExpressionUUID->"59e2a50a-c5f3-4ecb-9b0a-c77925940dfb"],
Cell[204700, 4060, 1909, 37, 376, "Output",ExpressionUUID->"b9effc34-3d0a-4c8d-ad79-e81c95dfbbfd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[206646, 4102, 1979, 33, 28, "Input",ExpressionUUID->"df93918c-148e-416f-9452-eac454c1e144"],
Cell[208628, 4137, 1534, 24, 32, "Output",ExpressionUUID->"0a398ea7-ec96-43c4-8e70-b8c02841d1fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[210199, 4166, 1744, 29, 28, "Input",ExpressionUUID->"479c4a73-9cd0-4705-ba40-9fed4d2c6f06"],
Cell[211946, 4197, 1199, 17, 32, "Output",ExpressionUUID->"9e0db90f-39a5-485d-9dd8-fcddab21ac6b"]
}, Open  ]],
Cell[213160, 4217, 1845, 34, 127, "Text",ExpressionUUID->"a3455fbe-53c6-41ab-9298-55b560fc7688"],
Cell[215008, 4253, 1188, 19, 48, "Input",ExpressionUUID->"701f177f-af56-4496-91b3-e3fc99615cb5"],
Cell[CellGroupData[{
Cell[216221, 4276, 636, 13, 45, "Input",ExpressionUUID->"acd9ef98-dc11-4b85-9c54-303fdfce7bda"],
Cell[216860, 4291, 276, 5, 32, "Output",ExpressionUUID->"f99bb8e4-9f85-40c4-9e4d-aabdbbc7d4ba"]
}, Open  ]]
}, Open  ]]
}
]
*)

